name: Lichess Bot Runner

concurrency:
  group: lichess-bot-runner
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'

permissions:
  actions: write
  contents: write

jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355  # restart just before GitHub limit

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies (clang, llvm-profdata, ccache, etc.)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y build-essential clang git make pkg-config ccache || true
        python -m pip install --upgrade pip wheel setuptools
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install pyyaml aiohttp tenacity websockets requests
        fi
        if command -v llvm-profdata >/dev/null 2>&1; then
          true
        else
          sudo apt-get update -qq
          sudo apt-get install -y llvm || true
          sudo apt-get install -y llvm-18 llvm-18-tools || true
          sudo apt-get install -y llvm-19 llvm-19-tools || true
          LLVM_VER="18.1.6"
          TARBALL="clang+llvm-${LLVM_VER}-x86_64-linux-gnu-ubuntu-22.04.tar.xz"
          DL_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VER}/${TARBALL}"
          mkdir -p /tmp/llvmtool
          if wget -q -O "/tmp/${TARBALL}" "${DL_URL}"; then
            tar -xf "/tmp/${TARBALL}" -C /tmp/llvmtool
            EXDIR=$(find /tmp/llvmtool -maxdepth 1 -type d -name "clang+llvm-*" -print -quit || true)
            if [ -n "$EXDIR" ]; then
              export PATH="$EXDIR/bin:$PATH"
            fi
          fi
        fi
        if command -v ccache >/dev/null 2>&1; then
          ccache -V || true
          ccache -M 5G || true
          ccache -s || true
        else
          true
        fi
        
    - name: Build Omega (single-step clang PGO build — safe PGO flow)
      run: |
        set -euo pipefail
        PERFORM_GENERATE=0
        PGO_RUN_TIME=${PGO_RUN_TIME:-120}
        PERFT_DEPTHS=(6 8)
        FENS=(
          "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
          "r4rk1/1pp1qppp/p1np1n2/4p3/2B1P3/2N2N2/PPP1QPPP/2KR3R w - - 0 1"
          "r3k2r/ppp2ppp/2n2n2/3qp3/3P4/2N1BN2/PPPQ1PPP/R3R1K1 w kq - 0 1"
          "8/8/8/8/8/2k5/5R2/2K5 w - - 0 1"
          "r1bq1rk1/pp3ppp/2n1pn2/2bp4/2B1P3/2NP1N2/PP3PPP/R1BQ1RK1 w - - 0 1"
          "8/2p5/3p4/1p3k2/3K4/8/8/8 w - - 0 1"
          "rnbqkbnr/2pp1ppp/p3p3/1p6/3PP3/5N2/PPP2PPP/RNBQKB1R w KQkq - 0 1"
          "2r3k1/5ppp/p3p3/1p6/3P4/2P1P3/PP3PPP/3R2K1 w - - 0 1"
          "8/P7/1K6/8/8/8/8/8 w - - 0 1"
          "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"
          "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"
          "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"
          "r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 1"
          "rnbq1bnr/pppp1ppp/4p3/8/2Pp4/5N2/PP1P1PPP/RNBQKB1R b KQ - 0 3"
          "r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1"
          "8/6P1/7k/8/8/8/6K1/8 w - - 0 1"
          "7k/5Q2/6K1/8/8/8/8/8 b - - 0 1"
          "8/8/8/8/3k4/5n2/6P1/6K1 w - - 0 1"
          "8/8/8/8/8/6k1/6p1/6K1 b - - 0 1"
          "r1bqk2r/pppp1ppp/2n2n2/4p3/4P3/2N2N2/PPPP1PPP/R1BQK2R w KQkq - 0 6"
          "r4rk1/1pp1qppp/p1np1n2/4p3/2B1P3/2N2N2/PPP1QPPP/2KR3R b - - 0 1"
          "1n1q1rk1/2r2ppp/p1p2n2/1p1p4/3P4/2N1PN2/PP2QPPP/1R3RK1 w - - 0 1"
          "8/8/8/2k5/8/5N2/6P1/6K1 w - - 0 1"
          "8/8/8/8/8/5k2/6p1/6K1 b - - 0 1"
          "2kr3r/pp1bbppp/2n1pn2/3p4/3P4/2N1PN2/PP3PPP/3R1RK1 w - - 0 1"
          "r3k2r/pppq1ppp/2np1n2/4p3/3P4/2N1PN2/PPPQ1PPP/R3K2R b KQkq - 0 1"
          "8/8/8/8/8/3k4/5N2/6K1 w - - 0 1"
          "8/8/8/8/8/6k1/6p1/7K b - - 0 1"
        )
  
        ROOT="$(pwd)"
        rm -rf Omega || true
        git clone https://x-access-token:${{ secrets.OMEGA_PAT }}@github.com/FayE75/Omega.git Omega
        if [ ! -d Omega/src ]; then
          exit 1
        fi
  
        sudo apt-get update -qq
        cd Omega/src
  
        if command -v ccache >/dev/null 2>&1; then
          export CC="ccache clang"
          export CXX="ccache clang++"
        else
          export CC="clang"
          export CXX="clang++"
        fi
        export CCACHE_DIR="${HOME}/.ccache"
  
        COMMON_FLAGS="-O3 -march=native -mtune=native -flto=thin -funroll-loops -fomit-frame-pointer"
        export CFLAGS="$COMMON_FLAGS"
        export CXXFLAGS="$COMMON_FLAGS"
        
        if [ "$PERFORM_GENERATE" -eq 1 ]; then
          INSTR_EXTRAS="-fprofile-instr-generate -fcoverage-mapping"
          INSTR_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping -flto=thin"
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang \
               EXTRACXXFLAGS="${INSTR_EXTRAS}" EXTRALDFLAGS="${INSTR_LDFLAGS}"; then
            exit 1
          fi
  
          instr_bin=$(find . -maxdepth 6 -type f -executable -iname 'stockfish*' -print -quit || true)
          if [ -z "$instr_bin" ]; then
            exit 1
          fi
  
          export LLVM_PROFILE_FILE="${HOME}/pgo-%p.profraw"
          BENCH_TIME=10
          timeout ${BENCH_TIME}s "${instr_bin}" bench > /tmp/pgo_bench_instrumented.txt 2>&1 || true
  
          START_TS=$(date +%s)
          END_TS=$((START_TS + PGO_RUN_TIME))
          PERFT_SUPPORTED=0
          probe_out=$({ printf "perft 1\nquit\n" | "${instr_bin}" 2>&1 || true; } )
          if ! printf "%s" "$probe_out" | grep -qi "Unknown command"; then
            PERFT_SUPPORTED=1
          else
            PERFT_SUPPORTED=0
          fi
  
          run_workload() {
            local fen="$1"
            local depth="$2"
            if [ "$PERFT_SUPPORTED" -eq 1 ]; then
              printf "position fen %s\nperft %d\nquit\n" "$fen" "$depth" | "${instr_bin}" > /tmp/pgo_perft_out.txt 2>&1 || true
            else
              THREADS="$(nproc 2>/dev/null || echo 1)"
              HASH_MB=256
              printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition fen %s\ngo depth %d\nquit\n" \
                "$THREADS" "$HASH_MB" "$fen" "$depth" | "${instr_bin}" 2>&1 | sed '/^option name/ d' > /tmp/pgo_perft_out.txt || true
            fi
          }
  
          idx=0
          while [ $(date +%s) -lt $END_TS ]; do
            for fen in "${FENS[@]}"; do
              now=$(date +%s)
              if [ $now -ge $END_TS ]; then break 3; fi
              if [ "$PERFT_SUPPORTED" -eq 1 ]; then
                for d in "${PERFT_DEPTHS[@]}"; do
                  now=$(date +%s)
                  if [ $now -ge $END_TS ]; then break 3; fi
                  run_workload "$fen" "$d"
                  idx=$((idx+1))
                done
              else
                for d in 4 5 6; do
                  now=$(date +%s)
                  if [ $now -ge $END_TS ]; then break 3; fi
                  run_workload "$fen" "$d"
                  idx=$((idx+1))
                done
              fi
              sleep 0.05
            done
          done
  
          if compgen -G "${HOME}/pgo-*.profraw" >/dev/null 2>&1; then
            if command -v llvm-profdata >/dev/null 2>&1; then
              llvm-profdata merge -o "${HOME}/merged.profdata" ${HOME}/pgo-*.profraw || true
            fi
          fi
        fi
  
        make clean || true
        if [ -f "${HOME}/merged.profdata" ] && command -v llvm-profdata >/dev/null 2>&1; then
          USE_EXTRAS="-fprofile-instr-use=${HOME}/merged.profdata -fcoverage-mapping"
          USE_LDFLAGS="-fprofile-instr-use=${HOME}/merged.profdata -flto=thin"
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang \
               EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}"; then
            if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang \
                 EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}"; then
              exit 1
            fi
          fi
        else
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang; then
            if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang; then
              exit 1
            fi
          fi
        fi
  
        found=$(find . -maxdepth 6 -type f -executable -iname 'stockfish*' -print -quit || true)
        if [ -z "$found" ]; then exit 1; fi
        strip "$found" || true
        mkdir -p ../../engines
        cp "$found" ../../engines/sf || true
        chmod +x ../../engines/sf || true
  
    - name: Build Fairy-Stockfish (clone + clang PGO build — bench/testpos workload)
      run: |
        set -euo pipefail
        PERFORM_GENERATE=${PERFORM_GENERATE:-0}
        PGO_RUN_TIME=${PGO_RUN_TIME:-120}
  
        ROOT="$(pwd)"
        rm -rf Fairy-Stockfish || true
        git clone https://github.com/fairy-stockfish/Fairy-Stockfish.git Fairy-Stockfish || { exit 1; }
        if [ ! -d Fairy-Stockfish/src ]; then
          exit 1
        fi
  
        sudo apt-get update -qq || true
        cd Fairy-Stockfish/src
  
        if command -v ccache >/dev/null 2>&1; then
          export CC="ccache clang"
          export CXX="ccache clang++"
        else
          export CC="clang"
          export CXX="clang++"
        fi
        export CCACHE_DIR="${HOME}/.ccache"
  
        COMMON_FLAGS="-O3 -march=native -mtune=native -flto=thin -funroll-loops -fomit-frame-pointer"
        export CFLAGS="$COMMON_FLAGS"
        export CXXFLAGS="$COMMON_FLAGS"
  
        FEN_CANDIDATES="/tmp/fairy_fens.txt"
        : > "$FEN_CANDIDATES" || true
  
        grep -RInhoP '^[rnbqkpRNBQKP1-8/]{8,}\s+[wb]\s+[^ ]+\s+[^ ]+\s+\d+\s+\d+' .. 2>/dev/null \
          | sed -E 's/^[^:]+://g' | sort -u > "$FEN_CANDIDATES" || true
  
        if [ ! -s "$FEN_CANDIDATES" ]; then
          grep -RInhoP '([rnbqkpRNBQKP1-8/]{8,}/[rnbqkpRNBQKP1-8/]{7,})\s+[wb]' .. 2>/dev/null \
            | sed -E 's/^[^:]+://;s/\r$//' | sort -u > "$FEN_CANDIDATES" || true
        fi
  
        if [ -s "$FEN_CANDIDATES" ]; then
          mapfile -t FENS < "$FEN_CANDIDATES"
        else
          FENS=()
        fi
  
        if [ "$PERFORM_GENERATE" -eq 1 ]; then
          INSTR_EXTRAS="-fprofile-instr-generate -fcoverage-mapping"
          INSTR_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping -flto=thin"
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang \
               EXTRACXXFLAGS="${INSTR_EXTRAS}" EXTRALDFLAGS="${INSTR_LDFLAGS}"; then
            exit 1
          fi
  
          instr_bin=$(find . -maxdepth 6 -type f -executable \( -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' \) -print -quit || true)
          if [ -z "$instr_bin" ]; then
            exit 1
          fi
  
          export LLVM_PROFILE_FILE="${HOME}/pgo-fairy-%p.profraw"
          START_TS=$(date +%s)
          END_TS=$((START_TS + PGO_RUN_TIME))
  
          BENCH_SUPPORTED=0
          probe_out=$("${instr_bin}" bench 2>&1 || true)
          if ! printf "%s" "$probe_out" | grep -qi "Unknown command\|unknown command\|usage"; then
            BENCH_SUPPORTED=1
          fi
  
          PERFT_SUPPORTED=0
          probe_out=$({ printf "perft 1\nquit\n" | "${instr_bin}" 2>&1 || true; } )
          if ! printf "%s" "$probe_out" | grep -qi "Unknown command"; then
            PERFT_SUPPORTED=1
          fi
  
          run_workload_from_fens() {
            local fen
            local idx=0
            for fen in "${FENS[@]}"; do
              now=$(date +%s); if [ $now -ge $END_TS ]; then break; fi
              if [ "$PERFT_SUPPORTED" -eq 1 ]; then
                printf "position fen %s\nperft 4\nquit\n" "$fen" | "${instr_bin}" > /tmp/pgo_fairy_perft_out.txt 2>&1 || true
              else
                THREADS="$(nproc 2>/dev/null || echo 1)"
                HASH_MB=256
                printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition fen %s\ngo depth 6\nquit\n" \
                  "$THREADS" "$HASH_MB" "$fen" | "${instr_bin}" 2>&1 | sed '/^option name/ d' > /tmp/pgo_fairy_perft_out.txt || true
              fi
              idx=$((idx+1))
              sleep 0.05
              now=$(date +%s); if [ $now -ge $END_TS ]; then break; fi
            done
          }
  
          run_workload_bench() {
            timeout 30 "${instr_bin}" bench > /tmp/pgo_fairy_bench_instrumented.txt 2>&1 || true
          }
  
          run_workload_startpos() {
            THREADS="$(nproc 2>/dev/null || echo 1)"
            HASH_MB=256
            while [ $(date +%s) -lt $END_TS ]; do
              printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition startpos\ngo depth 6\n" "$THREADS" "$HASH_MB" | "${instr_bin}" 2>&1 | sed '/^option name/ d' > /tmp/pgo_fairy_startpos_out.txt || true
              sleep 0.05
            done
          }
  
          if [ "${#FENS[@]}" -gt 0 ]; then
            while [ $(date +%s) -lt $END_TS ]; do
              run_workload_from_fens
            done
          else
            if [ "$BENCH_SUPPORTED" -eq 1 ]; then
              while [ $(date +%s) -lt $END_TS ]; do
                run_workload_bench
                sleep 0.05
              done
            else
              run_workload_startpos
            fi
          fi
  
          if compgen -G "${HOME}/pgo-fairy-*.profraw" >/dev/null 2>&1; then
            if command -v llvm-profdata >/dev/null 2>&1; then
              llvm-profdata merge -o "${HOME}/merged-fairy.profdata" ${HOME}/pgo-fairy-*.profraw || true
            fi
          fi
        fi
  
        make clean || true
        if [ -f "${HOME}/merged-fairy.profdata" ] && command -v llvm-profdata >/dev/null 2>&1; then
          USE_EXTRAS="-fprofile-instr-use=${HOME}/merged-fairy.profdata -fcoverage-mapping"
          USE_LDFLAGS="-fprofile-instr-use=${HOME}/merged-fairy.profdata -flto=thin"
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang \
               EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}"; then
            if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang; then
              exit 1
            fi
          fi
        else
          if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang; then
            if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang; then
              exit 1
            fi
          fi
        fi
  
        found=$(find . -maxdepth 6 -type f -executable \( -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' \) -print -quit || true)
        if [ -z "$found" ]; then
          found=$(find . -maxdepth 6 -type f -executable -print -quit || true)
        fi
        if [ -z "$found" ]; then
          exit 1
        fi
        strip "$found" || true
        mkdir -p "${ROOT}/engines"
        cp "$found" "${ROOT}/engines/fsf" || { exit 1; }
        chmod +x "${ROOT}/engines/fsf"

    - name: Setup engines permissions
      run: |
        chmod +x engines/sf || true
        chmod +x engines/fsf || true
        ls -la engines/ || true

      - name: Inject Lichess Bot Token
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, yaml, sys
          token = os.environ.get("LICHESS_TOKEN")
          if not token:
              print("ERROR: LICHESS_TOKEN secret is missing!")
              sys.exit(1)
          cfg_path = "config.yml"
          cfg = {}
          if os.path.exists(cfg_path):
              with open(cfg_path,"r") as f:
                  cfg = yaml.safe_load(f) or {}
          cfg["token"] = token
          with open(cfg_path,"w") as f:
              yaml.dump(cfg,f, default_flow_style=False)
          print("✅ Token injected successfully")
          EOF

      - name: Launch Bot
        run: |
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"

          if [[ "$MODE" == "matchmaking" ]]; then
              CMD="$CMD_BASE matchmaking"
              echo "🤖 Running command: $CMD"
              eval "$CMD"

          elif [[ "$MODE" == "tournament" ]]; then
              if [[ -z "$TOUR_ID" ]]; then
                  echo "⚠️ Tournament ID missing. Skipping."
              else
                  ARGS="$TOUR_ID"
                  [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
                  [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"

                  echo "🤖 Joining tournament: $ARGS"
                  eval "$CMD_BASE \"tournament $ARGS\""
              fi

          else
              echo "⚠️ Mode not recognized. Running normal mode."
              eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          # NOTE: This step can't control the previous step's process.
          # If you want an auto-restart supervisor, run inside the Launch Bot step (loop + timeout).
          echo "Auto-restart step present but control must be implemented inside the bot process/launcher if needed."
