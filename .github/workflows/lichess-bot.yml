name: Lichess Bot Runner

concurrency:
  group: lichess-bot-runner
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'

permissions:
  actions: write
  contents: write

jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml

      - name: Build wordfish (clone + build + perft)
        env:
          WORDFISH_PAT: ${{ secrets.WORDFISH_PAT }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail
          rm -rf wordfish || true
          git clone https://x-access-token:${WORDFISH_PAT}@github.com/FayE75/wordfish.git wordfish
          sudo apt-get update -qq
          sudo apt-get install -y build-essential clang lld llvm-dev pkg-config cmake ninja-build curl unzip libjsoncpp-dev librhash0 libssl-dev zlib1g-dev ccache || true
          cd wordfish || { echo "wordfish dir missing"; exit 1; }
          if [ -f "scripts/net.sh" ]; then
            cd src && sh ../scripts/net.sh || true
            cd ..
          fi
          if [ -d "src" ]; then
            cd src
            make clean || true
            grep -RIl "x86-64-sse41-popcnt" . 2>/dev/null | xargs -r sed -i 's/x86-64-sse41-popcnt/x86-64/g' || true
            grep -RIl "\-flto" . 2>/dev/null | xargs -r sed -i 's/-flto=full/-fno-lto/g; s/-flto=thin/-fno-lto/g; s/-flto//g' || true
            grep -RIl "\-march=" . 2>/dev/null | xargs -r sed -i 's/-march=[^[:space:]]\+//g' || true
            grep -RIl "\-DARCH=" . 2>/dev/null | xargs -r sed -i 's/-DARCH=[^[:space:]]\+//g' || true
            export CC=clang
            export CXX=clang++
            export LD=clang++
            export LDFLAGS="-fuse-ld=lld ${LDFLAGS:-}"
            export CFLAGS="-O2 -mtune=native -fomit-frame-pointer -fno-lto"
            export CXXFLAGS="$CFLAGS -std=c++17 -fno-exceptions -Wall -Wextra"
            set -x
            if ! make -j2 build ARCH=x86-64 COMP=clang CC="$CC" CXX="$CXX" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" V=1 2>&1 | tee build.log; then
              tail -n 400 build.log || true
              ls -lah *.o || true
              for f in *.o; do
                file "$f" || true
                readelf -h "$f" || true
              done || true
              grep -n "x86-64-sse41-popcnt" -R .. || true
              grep -n -- "-march" -R .. || true
              exit 1
            fi
            set +x
            cd ..
          else
            echo "src directory missing; cannot build"
            exit 1
          fi
          if [ -d "tests" ]; then
            cd tests && bash perft.sh || true
            cd ..
          fi
          BIN_PATH=$(find . -type f -executable -iname 'stockfish*' -o -iname 'wordfish*' -print -quit || true)
          if [ -z "$BIN_PATH" ]; then
            BIN_PATH=$(find src -type f -executable -iname 'stockfish*' -o -iname 'wordfish*' -print -quit || true)
          fi
          mkdir -p "${GITHUB_WORKSPACE}/engines"
          if [ -n "$BIN_PATH" ]; then
            cp "$BIN_PATH" "${GITHUB_WORKSPACE}/engines/wordfish" || true
            chmod +x "${GITHUB_WORKSPACE}/engines/wordfish" || true
          fi

      - name: Build Fairy-Stockfish (clone + clang PGO build — bench/testpos workload)
        run: |
          set -euo pipefail
          PERFORM_GENERATE=${PERFORM_GENERATE:-0}
          PGO_RUN_TIME=${PGO_RUN_TIME:-120}
          ROOT="$(pwd)"
          rm -rf Fairy-Stockfish || true
          git clone https://github.com/fairy-stockfish/Fairy-Stockfish.git Fairy-Stockfish || { exit 1; }
          if [ ! -d Fairy-Stockfish/src ]; then
            exit 1
          fi
          sudo apt-get update -qq
          sudo apt-get install -y build-essential clang lld llvm llvm-dev llvm-profdata pkg-config cmake ninja-build git ccache curl unzip libjsoncpp-dev librhash0 libssl-dev zlib1g-dev python3 python3-pip jq || true
          cd Fairy-Stockfish/src
          if command -v ccache >/dev/null 2>&1; then
            export CC="ccache clang"
            export CXX="ccache clang++"
          else
            export CC="clang"
            export CXX="clang++"
          fi
          export CCACHE_DIR="${HOME}/.ccache"
          COMMON_FLAGS="-O3 -march=native -mtune=native -flto=thin -funroll-loops -fomit-frame-pointer"
          export CFLAGS="$COMMON_FLAGS"
          export CXXFLAGS="$COMMON_FLAGS"
          FEN_CANDIDATES="/tmp/fairy_fens.txt"
          : > "$FEN_CANDIDATES" || true
          grep -RInhoP '^[rnbqkpRNBQKP1-8/]{8,}\s+[wb]\s+[^ ]+\s+[^ ]+\s+\d+\s+\d+' .. 2>/dev/null | sed -E 's/^[^:]+://g' | sort -u > "$FEN_CANDIDATES" || true
          if [ ! -s "$FEN_CANDIDATES" ]; then
            grep -RInhoP '([rnbqkpRNBQKP1-8/]{8,}/[rnbqkpRNBQKP1-8/]{7,})\s+[wb]' .. 2>/dev/null | sed -E 's/^[^:]+://;s/\r$//' | sort -u > "$FEN_CANDIDATES" || true
          fi
          if [ -s "$FEN_CANDIDATES" ]; then
            mapfile -t FENS < "$FEN_CANDIDATES"
          else
            FENS=()
          fi
          if [ "$PERFORM_GENERATE" -eq 1 ]; then
            INSTR_EXTRAS="-fprofile-instr-generate -fcoverage-mapping"
            INSTR_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping -flto=thin"
            if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${INSTR_EXTRAS}" EXTRALDFLAGS="${INSTR_LDFLAGS}"; then
              exit 1
            fi
            instr_bin=$(find . -maxdepth 6 -type f -executable \( -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' \) -print -quit || true)
            if [ -z "$instr_bin" ]; then
              exit 1
            fi
            export LLVM_PROFILE_FILE="${HOME}/pgo-fairy-%p.profraw"
            START_TS=$(date +%s)
            END_TS=$((START_TS + PGO_RUN_TIME))
            BENCH_SUPPORTED=0
            probe_out=$("${instr_bin}" bench 2>&1 || true)
            if ! printf "%s" "$probe_out" | grep -qi "Unknown command\|unknown command\|usage"; then
              BENCH_SUPPORTED=1
            fi
            PERFT_SUPPORTED=0
            probe_out=$({ printf "perft 1\nquit\n" | "${instr_bin}" 2>&1 || true; } )
            if ! printf "%s" "$probe_out" | grep -qi "Unknown command"; then
              PERFT_SUPPORTED=1
            fi
            run_workload_from_fens() {
              local fen
              local idx=0
              for fen in "${FENS[@]}"; do
                now=$(date +%s); if [ $now -ge $END_TS ]; then break; fi
                if [ "$PERFT_SUPPORTED" -eq 1 ]; then
                  printf "position fen %s\nperft 4\nquit\n" "$fen" | "${instr_bin}" > /tmp/pgo_fairy_perft_out.txt 2>&1 || true
                else
                  THREADS="$(nproc 2>/dev/null || echo 1)"
                  HASH_MB=256
                  printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition fen %s\ngo depth 6\nquit\n" "$THREADS" "$HASH_MB" "$fen" | "${instr_bin}" 2>&1 | sed '/^option name/ d' > /tmp/pgo_fairy_perft_out.txt || true
                fi
                idx=$((idx+1))
                sleep 0.05
                now=$(date +%s); if [ $now -ge $END_TS ]; then break; fi
              done
            }
            run_workload_bench() {
              timeout 30 "${instr_bin}" bench > /tmp/pgo_fairy_bench_instrumented.txt 2>&1 || true
            }
            run_workload_startpos() {
              THREADS="$(nproc 2>/dev/null || echo 1)"
              HASH_MB=256
              while [ $(date +%s) -lt $END_TS ]; do
                printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition startpos\ngo depth 6\n" "$THREADS" "$HASH_MB" | "${instr_bin}" 2>&1 | sed '/^option name/ d' > /tmp/pgo_fairy_startpos_out.txt || true
                sleep 0.05
              done
            }
            if [ "${#FENS[@]}" -gt 0 ]; then
              while [ $(date +%s) -lt $END_TS ]; do
                run_workload_from_fens
              done
            else
              if [ "$BENCH_SUPPORTED" -eq 1 ]; then
                while [ $(date +%s) -lt $END_TS ]; do
                  run_workload_bench
                  sleep 0.05
                done
              else
                run_workload_startpos
              fi
            fi
            if compgen -G "${HOME}/pgo-fairy-*.profraw" >/dev/null 2>&1; then
              if command -v llvm-profdata >/dev/null 2>&1; then
                llvm-profdata merge -o "${HOME}/merged-fairy.profdata" ${HOME}/pgo-fairy-*.profraw || true
              fi
            fi
          fi
          make clean || true
          if [ -f "${HOME}/merged-fairy.profdata" ] && command -v llvm-profdata >/dev/null 2>&1; then
            USE_EXTRAS="-fprofile-instr-use=${HOME}/merged-fairy.profdata -fcoverage-mapping"
            USE_LDFLAGS="-fprofile-instr-use=${HOME}/merged-fairy.profdata -flto=thin"
            if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}"; then
              if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang; then
                exit 1
              fi
            fi
          else
            if ! make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang; then
              if ! make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang; then
                exit 1
              fi
            fi
          fi
          found=$(find . -maxdepth 6 -type f -executable \( -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' \) -print -quit || true)
          if [ -z "$found" ]; then
            found=$(find . -maxdepth 6 -type f -executable -print -quit || true)
          fi
          if [ -z "$found" ]; then
            exit 1
          fi
          strip "$found" || true
          mkdir -p "${ROOT}/engines"
          cp "$found" "${ROOT}/engines/fsf" || { exit 1; }
          chmod +x "${ROOT}/engines/fsf"

      - name: Setup engines permissions
        run: |
          chmod +x engines/wordfish || true
          chmod +x engines/fsf || true
          ls -la engines/ || true

      - name: Inject Lichess Bot Token
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, yaml, sys
          token = os.environ.get("LICHESS_TOKEN")
          if not token:
              print("ERROR: LICHESS_TOKEN secret is missing!")
              sys.exit(1)
          cfg_path = "config.yml"
          cfg = {}
          if os.path.exists(cfg_path):
              with open(cfg_path,"r") as f:
                  cfg = yaml.safe_load(f) or {}
          cfg["token"] = token
          with open(cfg_path,"w") as f:
              yaml.dump(cfg,f, default_flow_style=False)
          print("✅ Token injected successfully")
          EOF

      - name: Launch Bot
        run: |
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"
          if [[ "$MODE" == "matchmaking" ]]; then
              CMD="$CMD_BASE matchmaking"
              echo "🤖 Running command: $CMD"
              eval "$CMD"
          elif [[ "$MODE" == "tournament" ]]; then
              if [[ -z "$TOUR_ID" ]]; then
                  echo "⚠️ Tournament ID missing. Skipping."
              else
                  ARGS="$TOUR_ID"
                  [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
                  [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"
                  echo "🤖 Joining tournament: $ARGS"
                  eval "$CMD_BASE \"tournament $ARGS\""
              fi
          else
              echo "⚠️ Mode not recognized. Running normal mode."
              eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          echo "Auto-restart step present but control must be implemented inside the bot process/launcher if needed."
