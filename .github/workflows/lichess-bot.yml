name: Lichess Bot Runner

concurrency:
  group: lichess-bot-runner
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'

permissions:
  actions: write
  contents: write

jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355  # restart just before GitHub limit

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml
          
      - name: Debug: show generated temp scripts
        run: |
          echo "Listing /home/runner/work/_temp/*.sh"
          ls -lah /home/runner/work/_temp/*.sh || true
          for f in /home/runner/work/_temp/*.sh; do
            echo "---- $f ----"
            sed -n '1,200p' "$f" || true
            echo
          done

      - name: Upload wordfish build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wordfish-build-logs
          path: wordfish/build_logs


      - name: Setup Engines
        run: |
          mkdir -p engines
          sudo apt-get update && sudo apt-get install -y unzip || true
          if [ -f "engines/wordfish" ]; then chmod +x engines/wordfish; fi
          if [ -f "engines/fsf" ]; then chmod +x engines/fsf; fi
          if [ -f "engines/ShashChess39" ]; then chmod +x engines/ShashChess39; fi

      - name: Inject Lichess Bot Token
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, yaml, sys
          token = os.environ.get("LICHESS_TOKEN")
          if not token:
              print("ERROR: LICHESS_TOKEN secret is missing!")
              sys.exit(1)
          cfg_path = "config.yml"
          cfg = {}
          if os.path.exists(cfg_path):
              with open(cfg_path,"r") as f:
                  cfg = yaml.safe_load(f) or {}
          cfg["token"] = token
          with open(cfg_path,"w") as f:
              yaml.dump(cfg,f, default_flow_style=False)
          print("✅ Token injected successfully")
          EOF

      - name: Launch Bot
        run: |
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"

          if [[ "$MODE" == "matchmaking" ]]; then
              CMD="$CMD_BASE matchmaking"
              echo "🤖 Running command: $CMD"
              eval "$CMD"

          elif [[ "$MODE" == "tournament" ]]; then
              if [[ -z "$TOUR_ID" ]]; then
                  echo "⚠️ Tournament ID missing. Skipping."
              else
                  ARGS="$TOUR_ID"
                  [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
                  [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"

                  echo "🤖 Joining tournament: $ARGS"
                  eval "$CMD_BASE \"tournament $ARGS\""
              fi

          else
              echo "⚠️ Mode not recognized. Running normal mode."
              eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          echo "Auto-restart step present but control must be implemented inside the bot process/launcher if needed."
