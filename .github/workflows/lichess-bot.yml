name: Lichess Bot Runner

concurrency:
  group: lichess-bot-runner
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'

permissions:
  actions: write
  contents: write

jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355  # restart just before GitHub limit

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml

      - name: Build wordfish (clone + build + perft)
        env:
          WORDFISH_PAT: ${{ secrets.WORDFISH_PAT }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail
          rm -rf wordfish || true
          git clone https://x-access-token:${WORDFISH_PAT}@github.com/FayE75/wordfish.git wordfish

          # install build deps (best-effort; flavor may be adjusted for your project)
          sudo apt-get update -qq
          sudo apt-get install -y build-essential clang lld llvm-dev pkg-config cmake ninja-build curl unzip || true

          # go to repo root
          cd wordfish

          # run network/setup script (tutor: cd src && sh ../scripts/net.sh)
          if [ -f "scripts/net.sh" ]; then
            cd src && sh ../scripts/net.sh || true
            cd ..
          else
            echo "‚ö†Ô∏è scripts/net.sh not found ‚Äî skipping net.sh"
          fi

          # build (tutor command)
          if [ -d "src" ]; then
            cd src
            echo "üîß Running make -j2 build ARCH=x86-64-sse41-popcnt"
            # run make; fail the step if build fails
            make -j2 build ARCH=x86-64-sse41-popcnt
            cd ..
          else
            echo "‚ùå src directory missing; cannot build"
            exit 1
          fi

          # run perft tests (best-effort, won't fail whole job if perft fails)
          if [ -d "tests" ]; then
            echo "‚ñ∂Ô∏è Running tests/perft.sh (best-effort)"
            cd tests && bash perft.sh || true
            cd ..
          else
            echo "‚ö†Ô∏è tests directory missing; skipping perft"
          fi

          # find built binary (search under repo)
          BIN_PATH=$(find . -type f -executable -iname 'stockfish*' -o -iname 'wordfish*' -print -quit || true)
          if [ -z "$BIN_PATH" ]; then
            # try deeper search in src
            BIN_PATH=$(find src -type f -executable -iname 'stockfish*' -o -iname 'wordfish*' -print -quit || true)
          fi

          # copy binary to top-level engines folder so other steps can use it
          mkdir -p "${GITHUB_WORKSPACE}/engines"
          if [ -n "$BIN_PATH" ]; then
            echo "‚úÖ Found built engine: $BIN_PATH"
            cp "$BIN_PATH" "${GITHUB_WORKSPACE}/engines/wordfish" || true
            chmod +x "${GITHUB_WORKSPACE}/engines/wordfish" || true
            echo "‚úÖ Engine copied to engines/wordfish"
          else
            echo "‚ö†Ô∏è No engine binary found after build"
          fi

      - name: Setup Engines
        run: |
          mkdir -p engines
          sudo apt-get update && sudo apt-get install -y unzip || true
          # If we have engines placed already by previous step, ensure they are executable
          if [ -f "engines/wordfish" ]; then chmod +x engines/wordfish; fi
          if [ -f "engines/stockfish" ]; then chmod +x engines/stockfish; fi
          if [ -f "engines/fsf" ]; then chmod +x engines/fsf; fi
          if [ -f "engines/ShashChess39" ]; then chmod +x engines/ShashChess39; fi

      - name: Inject Lichess Bot Token
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, yaml, sys
          token = os.environ.get("LICHESS_TOKEN")
          if not token:
              print("ERROR: LICHESS_TOKEN secret is missing!")
              sys.exit(1)
          cfg_path = "config.yml"
          cfg = {}
          if os.path.exists(cfg_path):
              with open(cfg_path,"r") as f:
                  cfg = yaml.safe_load(f) or {}
          cfg["token"] = token
          with open(cfg_path,"w") as f:
              yaml.dump(cfg,f, default_flow_style=False)
          print("‚úÖ Token injected successfully")
          EOF

      - name: Launch Bot
        run: |
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"

          if [[ "$MODE" == "matchmaking" ]]; then
              CMD="$CMD_BASE matchmaking"
              echo "ü§ñ Running command: $CMD"
              eval "$CMD"

          elif [[ "$MODE" == "tournament" ]]; then
              if [[ -z "$TOUR_ID" ]]; then
                  echo "‚ö†Ô∏è Tournament ID missing. Skipping."
              else
                  ARGS="$TOUR_ID"
                  [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
                  [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"

                  echo "ü§ñ Joining tournament: $ARGS"
                  eval "$CMD_BASE \"tournament $ARGS\""
              fi

          else
              echo "‚ö†Ô∏è Mode not recognized. Running normal mode."
              eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          # NOTE: This step can't control the previous step's process.
          # If you want an auto-restart supervisor, run inside the Launch Bot step (loop + timeout).
          echo "Auto-restart step present but control must be implemented inside the bot process/launcher if needed."
